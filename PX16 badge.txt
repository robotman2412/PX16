
Tha PX16 bodge:
	1x	PX16 (16-bit) CPU, 16Kw ROM-ish, 64 Kw RAM
	1x	Hardware timer with 1 limit
	10x	Buttons

Power modes:
	On:
		Powered on, CPU running continuously.
		Default state.
	Idle:
		Powered on, CPU resumes on interrupt.
		Entered by updating power mode register.
		All states are preserved on exit.
	Light sleep:
		Powered on, power CPU restored on button press.
		Entered by updating power mode register.
		CPU will reset on exit, but RAM will not.
	Deep sleep:
		Powered off, power restored on button press.
		Entered by updating power mode register.
		CPU and RAM will reset on exit.
	Off:
		Powered off, battery disconnected.
		Literally just a power switch.

Examples:
	On:
		Calculations, games and fun things.
	Idle:
		Little or no usage of CPU time.
	Light sleep:
		Waiting for inputs, saving power when nothing is happening.
	Deep sleep:
		Not in immediate use, saving power.
	Off:
		Not in use for an extended period of time.

MMIO:
	0xffff:			MMIO Size			(0x0040)
	0xfffe:			Power/timer mode	(6-bit + 6-bit)
	0xfffd:			Button input		(10-bit)
	0xfffb:			Timer 0 high
	0xfffa:			Timer 0 low
	0xfff9:			Limit 0 high
	0xfff8:			Limit 0 low
	0xfff7:			UART mode
	0xfff6:			UART write
	0xfff5:			UART read
	0xfff4:			Interrupt sense
	0xfff3:			Div/Mul mode
	0xfff2:			Memory mode?
	0xfffc-0xffff:	Div/Mul accumulator
	0xfff8-0xfffb:	Div/Mul remainder
	0xfff4-0xfff7:	Div/Mul divisor
	0xffc0-0xffdf:	Matrix display

Power mode register: .DLI ---- .TBS ----
	D: Deep sleep:   Turns off power to CPU and RAM when 1.
	L: Light sleep:  Turns off power to CPU when 1.
	I: Idle:         Pauses the CPU when 1.
	T: Timer state:  Timers may wake from sleep when 0.
	B: Button state: Buttons may wake from sleep when 0.
	S: Screen state: Enables the screen when 0.

Timer triggers:      ---- BTRW ---- ----
	B: Interrupts:   Acknowledge button interrupt.
	T: Interrupts:   Acknowledge timer interrupt.
	R: Read value:   Read current value to intermediary registers.
	W: Write value:  Write intermediary registers current value.

Timer mode register: ---- ---- ---- .INE
	I: Interrupts:   Send an IRQ when the limit is reached.
	N: Interrupts:   Send an NMI when the limit is reached.
	E: Enable:       Enable the timer.

Interrupt sense register (NMI): ---- MBTU ---- ----
	M: Div/Mul unit interrupt
	B: Button interrupt
	T: Timer interrupt
	U: UART recv interrupt.

Interrupt sense register (IRQ): ---- ---- ---- MBTU
	M: Div/Mul unit interrupt
	B: Button interrupt
	T: Timer interrupt
	U: UART recv interrupt.

Memory mode register: ---- ---- ..WR LLLL
	W: Write enable:	Writes through to RAM when 1.
	R: Read select:		Reads from RAM when 1, ROM when 0.
	L: ROM length?:		Length of affected range, unit TBD.
	
	Do not assume that this register is reset.

Button input:
	    .---.                      .-.    
	    | 1 |               .-.   ( 5 )   
	.---'   '---.          ( 4 )   '-'    
	| 0       3 |           '-'       .-. 
	'---.   .---'              .-.   ( 7 )
	    | 2 |                 ( 6 )   '-' 
	    '---'                  '-'        
	                                      
	          ______      ______          
	          \__8__\     \__9__\         
	
	The button inputs are mapped directly to the bus through a buffer.

Div/Mul mode register: .OAC .WTM LIBB BBBB
	A: Activity:		Reads 1 when the unit is active.
	C: Current mode:	Reflects the current operating mode, if active.
	O: Overflow:		Reads 1 when multiply overflows.
	W: Await:			(Optional?) Halts the CPU until the unit is done.
	T: Trigger:			Start the unit.
	M: Mode:			Mode to run in, 1 is divide, 0 is multiply.
	L: Long mode?:		(Optional?) Clears highest 32 bits of registers, to save time moving data.
	I: Integer mode?:	(Optional?) Clears highest 48 bits of registers, to save time moving data.
	B: Bits:			Number of bits (and cycles duration) to operate for.
	
	To multiply:
		Put inputs in accumulator and divisor,
		Start with mode 0,
		Read result from remainder.
	
	To divide and modulo:
		Put divisor in its register,
		Put other number in remainder,
		Start with mode 1,
		Read division result from accumulator,
		Read modulo result from remainder.
	
	To shift left:
		Put input in accumulator,
		Put 0 in remainder,
		Start with mode 1,
		Read result from accumulator.
	
	To shift right:
		Put input in divisor,
		Put 0 in remainder,
		Start with mode 1,
		Read result from divisor.
	
	Shift left and shift right can be performed at the same time, given the same shift number.
	The number of bits to shift is the bits input.
	
	When in multiply mode, resets remainder on trigger,
	When in divide mode, resets accumulator on trigger.
	
	If integer mode and long mode are combined, clears only the highest 16 bits.
